package practice;

import java.util.Arrays;

public class H0731_2 {
	//InsertionSort

	public static void insertionSort(int[]d) {
		for(int i=1;i<d.length;i++) {//i=1 :2つ目の要素は最初の要素の左右どちらかに挿入するので、最初の要素は調べる必要がない
			int tmp=d[i];//tmp 一時保管の変数, 2目のindex要素を保管
			int j=i;//whileで使用

			while(j>0 && d[j-1]>tmp) {//j>0繰り返し処理終了条件
				//今まで挿入してきたd[j-1]達（挿入対象の要素よりも前にある要素）が挿入対象tmpよりも大きいか
				d[j]=d[j-1];//挿入 8,4の並びだったら 今は8,8になってる。
				j--;//while文終了条件
				System.out.println(Arrays.toString(d));
			}
			d[j]=tmp;//一時保存していた要素を戻す。 4,8になる。
			//d[j-1]>tmpのおかげで、jが0になり切らずに、抜けることがあるから、適切な箇所に挿入できる
			System.out.println(Arrays.toString(d));
		}
	}

	public static void print(int[]d) {
		for(int num:d) {
			System.out.print(num+"\t");
		}
	}

	public static void main(String[] args) {
		int[]d = {8,4,3,7,6,5,2,1};
		System.out.println(Arrays.toString(d));

		insertionSort(d);
		print(d);


	}


	/**
	 *処理の流れ。
	[8, 4, 3, 7, 6, 5, 2, 1]
	[8, 8, 3, 7, 6, 5, 2, 1]
	[4, 8, 3, 7, 6, 5, 2, 1]
	[4, 8, 8, 7, 6, 5, 2, 1]
	[4, 4, 8, 7, 6, 5, 2, 1]
	[3, 4, 8, 7, 6, 5, 2, 1]
	[3, 4, 8, 8, 6, 5, 2, 1]
	[3, 4, 7, 8, 6, 5, 2, 1]
	[3, 4, 7, 8, 8, 5, 2, 1]
	[3, 4, 7, 7, 8, 5, 2, 1]
	[3, 4, 6, 7, 8, 5, 2, 1]
	[3, 4, 6, 7, 8, 8, 2, 1]
	[3, 4, 6, 7, 7, 8, 2, 1]
	[3, 4, 6, 6, 7, 8, 2, 1]
	[3, 4, 5, 6, 7, 8, 2, 1]
	[3, 4, 5, 6, 7, 8, 8, 1]
	[3, 4, 5, 6, 7, 7, 8, 1]
	[3, 4, 5, 6, 6, 7, 8, 1]
	[3, 4, 5, 5, 6, 7, 8, 1]
	[3, 4, 4, 5, 6, 7, 8, 1]
	[3, 3, 4, 5, 6, 7, 8, 1]
	[2, 3, 4, 5, 6, 7, 8, 1]
	[2, 3, 4, 5, 6, 7, 8, 8]
	[2, 3, 4, 5, 6, 7, 7, 8]
	[2, 3, 4, 5, 6, 6, 7, 8]
	[2, 3, 4, 5, 5, 6, 7, 8]
	[2, 3, 4, 4, 5, 6, 7, 8]
	[2, 3, 3, 4, 5, 6, 7, 8]
	[2, 2, 3, 4, 5, 6, 7, 8]
	[1, 2, 3, 4, 5, 6, 7, 8]
	 *
	 */

}
